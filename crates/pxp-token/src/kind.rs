#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum TokenKind {
    // Keywords:
    Die,
    From,
    Print,
    Readonly,
    Global,
    Abstract,
    As,
    Break,
    Case,
    Switch,
    Catch,
    Class,
    Clone,
    Const,
    Continue,
    Declare,
    Default,
    Do,
    Echo,
    Else,
    ElseIf,
    Empty,
    EndDeclare,
    EndFor,
    EndForeach,
    EndIf,
    EndSwitch,
    EndWhile,
    Enum,
    Extends,
    False,
    Final,
    Finally,
    Fn,
    For,
    Foreach,
    Function,
    Goto,
    If,
    Implements,
    Include,
    IncludeOnce,
    Instanceof,
    Insteadof,
    Eval,
    Exit,
    Unset,
    Isset,
    List,
    Interface,
    Match,
    Namespace,
    New,
    Null,
    Private,
    Protected,
    Public,
    Require,
    RequireOnce,
    Return,
    Static,
    Throw,
    Trait,
    Try,
    True,
    Use,
    Var,
    Yield,
    While,
    Array,
    HaltCompiler,

    // Literals:
    Integer,
    Float,
    SingleQuotedString,
    DoubleQuotedString,
    InterpolatedStringPart,
    Identifier,
    Variable,
    QualifiedIdentifier,
    FullyQualifiedIdentifier,

    // Heredoc & Nowdoc:
    StartDocString(DocStringKind),
    EndDocString(DocStringIndentationKind, DocStringIndentationAmount),

    // Sigils, Punctuation & Operators:
    Dollar,
    BitwiseAnd,
    BitwiseAndAssign,
    And,
    Arrow,
    NullsafeArrow,
    ErrorControl,
    Multiply,
    Attribute,
    Not,
    NotEqual,
    NotIdentical,
    Spaceship,
    Or,
    BitwiseXor,
    BitwiseXorAssign,
    SubtractAssign,
    NullCoalesce,
    NullCoalesceAssign,
    MultiplyAssign,
    Colon,
    Comma,
    InterpolationStart,
    Decrement,
    DivideAssign,
    DollarLeftBrace,
    Concat,
    ConcatAssign,
    DoubleArrow,
    DoubleColon,
    Equals,
    DoubleQuote,
    Ellipsis,
    Assign,
    GreaterThan,
    GreaterThanOrEqual,
    Increment,
    InlineHtml,
    LeftBrace,
    LeftBracket,
    LeftParen,
    LeftShift,
    LeftShiftAssign,
    RightShift,
    RightShiftAssign,
    LessThan,
    LessThanOrEqual,
    Subtract,
    NamespaceSeparator,
    Modulo,
    ModuloAssign,
    BitwiseOr,
    BitwiseOrAssign,
    Add,
    AddAssign,
    Pow,
    PowAssign,
    Question,
    QuestionColon,
    RightBrace,
    RightBracket,
    RightParen,
    SemiColon,
    Divide,
    Identical,
    BitwiseNot,
    LogicalAnd,
    LogicalOr,
    LogicalXor,
    Backtick,

    // Tags:
    FullOpenTag,
    ShortOpenTag,
    EchoOpenTag,
    CloseTag,

    // Special Constants:
    __CLASS__,
    __TRAIT__,
    __FUNCTION__,
    __METHOD__,
    __LINE__,
    __FILE__,
    __DIR__,
    __NAMESPACE__,
    __COMPILER_HALT_OFFSET__,

    // Casts:
    FloatCast,
    IntCast,
    ObjectCast,
    UnsetCast,
    StringCast,
    BinaryCast,
    ArrayCast,
    BoolCast,

    // Comments
    SlashComment,
    HashComment,
    BlockComment,
    DocBlockComment,

    // Misc:
    Eof,
}

pub type DocStringIndentationAmount = usize;

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum DocStringIndentationKind {
    Space,
    Tab,
    Both,
    None,    
}

impl From<u8> for DocStringIndentationKind {
    fn from(byte: u8) -> Self {
        match byte {
            b' ' => Self::Space,
            b'\t' => Self::Tab,
            _ => unreachable!(),
        }
    }
}

impl From<DocStringIndentationKind> for u8 {
    fn from(kind: DocStringIndentationKind) -> Self {
        match kind {
            DocStringIndentationKind::Space => b' ',
            DocStringIndentationKind::Tab => b'\t',
            _ => unreachable!(),
        }
    }
}


#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Clone, Hash, Copy)]
pub enum DocStringKind {
    Heredoc,
    Nowdoc,
}