use std::fmt::Display;

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum TokenKind {
    // Keywords:
    Die,
    From,
    Print,
    Readonly,
    Global,
    Abstract,
    As,
    Break,
    Case,
    Switch,
    Catch,
    Class,
    Clone,
    Const,
    Continue,
    Declare,
    Default,
    Do,
    Echo,
    Else,
    ElseIf,
    Empty,
    EndDeclare,
    EndFor,
    EndForeach,
    EndIf,
    EndSwitch,
    EndWhile,
    Enum,
    Extends,
    False,
    Final,
    Finally,
    Fn,
    For,
    Foreach,
    Function,
    Goto,
    If,
    Implements,
    Include,
    IncludeOnce,
    Instanceof,
    Insteadof,
    Eval,
    Exit,
    Unset,
    Isset,
    List,
    Interface,
    Match,
    Namespace,
    New,
    Null,
    Private,
    Protected,
    Public,
    Require,
    RequireOnce,
    Return,
    Static,
    Throw,
    Trait,
    Try,
    True,
    Use,
    Var,
    Yield,
    While,
    Array,
    HaltCompiler,

    // Literals:
    Integer,
    Float,
    SingleQuotedString,
    DoubleQuotedString,
    InterpolatedStringPart,
    Identifier,
    Variable,
    QualifiedIdentifier,
    FullyQualifiedIdentifier,

    // Heredoc & Nowdoc:
    StartDocString(DocStringKind),
    EndDocString(DocStringIndentationKind, DocStringIndentationAmount),

    // Sigils, Punctuation & Operators:
    Dollar,
    BitwiseAnd,
    BitwiseAndAssign,
    And,
    Arrow,
    NullsafeArrow,
    ErrorControl,
    Multiply,
    Attribute,
    Not,
    NotEqual,
    NotIdentical,
    Spaceship,
    Or,
    BitwiseXor,
    BitwiseXorAssign,
    SubtractAssign,
    NullCoalesce,
    NullCoalesceAssign,
    MultiplyAssign,
    Colon,
    Comma,
    InterpolationStart,
    Decrement,
    DivideAssign,
    DollarLeftBrace,
    Concat,
    ConcatAssign,
    DoubleArrow,
    DoubleColon,
    Equals,
    DoubleQuote,
    Ellipsis,
    Assign,
    GreaterThan,
    GreaterThanOrEqual,
    Increment,
    InlineHtml,
    LeftBrace,
    LeftBracket,
    LeftParen,
    LeftShift,
    LeftShiftAssign,
    RightShift,
    RightShiftAssign,
    LessThan,
    LessThanOrEqual,
    Subtract,
    NamespaceSeparator,
    Modulo,
    ModuloAssign,
    BitwiseOr,
    BitwiseOrAssign,
    Add,
    AddAssign,
    Pow,
    PowAssign,
    Question,
    QuestionColon,
    RightBrace,
    RightBracket,
    RightParen,
    SemiColon,
    Divide,
    Identical,
    BitwiseNot,
    LogicalAnd,
    LogicalOr,
    LogicalXor,
    Backtick,

    // Tags:
    FullOpenTag,
    ShortOpenTag,
    EchoOpenTag,
    CloseTag,

    // Special Constants:
    __CLASS__,
    __TRAIT__,
    __FUNCTION__,
    __METHOD__,
    __LINE__,
    __FILE__,
    __DIR__,
    __NAMESPACE__,
    __COMPILER_HALT_OFFSET__,

    // Casts:
    FloatCast,
    IntCast,
    ObjectCast,
    UnsetCast,
    StringCast,
    BinaryCast,
    ArrayCast,
    BoolCast,

    // Comments
    SlashComment,
    HashComment,
    BlockComment,
    DocBlockComment,

    // Misc:
    Eof,

    // Error Tolerance:
    Missing,
}

impl Display for TokenKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use TokenKind::*;

        write!(f, "{}", match self {
            Die => "die",
            From => "from",
            Print => "print",
            Readonly => "readonly",
            Global => "global",
            Abstract => "abstract",
            As => "as",
            Break => "break",
            Case => "case",
            Switch => "switch",
            Catch => "catch",
            Class => "class",
            Clone => "clone",
            Const => "const",
            Continue => "continue",
            Declare => "declare",
            Default => "default",
            Do => "do",
            Echo => "echo",
            Else => "else",
            ElseIf => "elseif",
            Empty => "empty",
            EndDeclare => "enddeclare",
            EndFor => "endfor",
            EndForeach => "endforeach",
            EndIf => "endif",
            EndSwitch => "endswitch",
            EndWhile => "endwhile",
            Enum => "enum",
            Extends => "extends",
            False => "false",
            Final => "final",
            Finally => "finally",
            Fn => "fn",
            For => "for",
            Foreach => "foreach",
            Function => "function",
            Goto => "goto",
            If => "if",
            Implements => "implements",
            Include => "include",
            IncludeOnce => "include_once",
            Instanceof => "instanceof",
            Insteadof => "insteadof",
            Eval => "eval",
            Exit => "exit",
            Unset => "unset",
            Isset => "isset",
            List => "list",
            Interface => "interface",
            Match => "match",
            Namespace => "namespace",
            New => "new",
            Null => "null",
            Private => "private",
            Protected => "protected",
            Public => "public",
            Require => "require",
            RequireOnce => "require_once",
            Return => "return",
            Static => "static",
            Throw => "throw",
            Trait => "trait",
            Try => "try",
            True => "true",
            Use => "use",
            Var => "var",
            Yield => "yield",
            While => "while",
            Array => "array",
            HaltCompiler => "__halt_compiler",
            Integer => "<integer>",
            Float => "<float>",
            SingleQuotedString => "<single-quoted-string>",
            DoubleQuotedString => "<double-quoted-string>",
            InterpolatedStringPart => "<interpolated-string-part>",
            Identifier => "<identifier>",
            Variable => "<variable>",
            QualifiedIdentifier => "<qualified-identifier>",
            FullyQualifiedIdentifier => "<fully-qualified-identifier>",
            StartDocString(_) => "<doc-string>",
            EndDocString(_, _) => "<doc-string>",
            Dollar => "$",
            BitwiseAnd => "&",
            BitwiseAndAssign => "&=",
            And => "and",
            Arrow => "->",
            NullsafeArrow => "?->",
            ErrorControl => "@",
            Multiply => "*",
            Attribute => "#[",
            Not => "!",
            NotEqual => "!=",
            NotIdentical => "!==",
            Spaceship => "<=>",
            Or => "||",
            BitwiseXor => "^",
            BitwiseXorAssign => "^=",
            SubtractAssign => "-=",
            NullCoalesce => "??",
            NullCoalesceAssign => "??=",
            MultiplyAssign => "*=",
            Colon => ":",
            Comma => ",",
            InterpolationStart => "${",
            Decrement => "--",
            DivideAssign => "/=",
            DollarLeftBrace => "${",
            Concat => ".",
            ConcatAssign => ".=",
            DoubleArrow => "=>",
            DoubleColon => "::",
            Equals => "==",
            DoubleQuote => "\"",
            Ellipsis => "...",
            Assign => "=",
            GreaterThan => ">",
            GreaterThanOrEqual => ">=",
            Increment => "++",
            InlineHtml => "<inline-html>",
            LeftBrace => "{",
            LeftBracket => "[",
            LeftParen => "(",
            LeftShift => "<<",
            LeftShiftAssign => "<<=",
            RightShift => ">>",
            RightShiftAssign => ">>=",
            LessThan => "<",
            LessThanOrEqual => "<=",
            Subtract => "-",
            NamespaceSeparator => "\\",
            Modulo => "%",
            ModuloAssign => "%=",
            BitwiseOr => "|",
            BitwiseOrAssign => "|=",
            Add => "+",
            AddAssign => "+=",
            Pow => "**",
            PowAssign => "**=",
            Question => "?",
            QuestionColon => "?:",
            RightBrace => "}",
            RightBracket => "]",
            RightParen => ")",
            SemiColon => ";",
            Divide => "/",
            Identical => "===",
            BitwiseNot => "~",
            LogicalAnd => "and",
            LogicalOr => "or",
            LogicalXor => "xor",
            Backtick => "`",
            FullOpenTag => "<?php",
            ShortOpenTag => "<?",
            EchoOpenTag => "<?=",
            CloseTag => "?>",
            __CLASS__ => "__CLASs__",
            __TRAIT__ => "__TRAIT__",
            __FUNCTION__ => "__FUNCTION__",
            __METHOD__ => "__METHOD__",
            __LINE__ => "__LINE__",
            __FILE__ => "__FILE__",
            __DIR__ => "__DIR__",
            __NAMESPACE__ => "__NAMESPACE__",
            __COMPILER_HALT_OFFSET__ => "__COMPILER_HALT_OFFSET__",
            FloatCast => "(float)",
            IntCast => "(int)",
            ObjectCast => "(object)",
            UnsetCast => "(unset)",
            StringCast => "(string)",
            BinaryCast => "(binary)",
            ArrayCast => "(array)",
            BoolCast => "(bool)",
            SlashComment => "//",
            HashComment => "#",
            BlockComment => "/*",
            DocBlockComment => "/**",
            Eof => "<end-of-file>",
            Missing => "<missing>",
        })
    }
}

pub type DocStringIndentationAmount = usize;

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum DocStringIndentationKind {
    Space,
    Tab,
    Both,
    None,    
}

impl From<u8> for DocStringIndentationKind {
    fn from(byte: u8) -> Self {
        match byte {
            b' ' => Self::Space,
            b'\t' => Self::Tab,
            _ => unreachable!(),
        }
    }
}

impl From<DocStringIndentationKind> for u8 {
    fn from(kind: DocStringIndentationKind) -> Self {
        match kind {
            DocStringIndentationKind::Space => b' ',
            DocStringIndentationKind::Tab => b'\t',
            _ => unreachable!(),
        }
    }
}


#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Clone, Hash, Copy)]
pub enum DocStringKind {
    Heredoc,
    Nowdoc,
}